//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: BoilerplateDcps.h
//  Source: gen/BoilerplateDcps.idl
//  Generated: Wed Nov  1 02:24:33 2017
//  OpenSplice 6.7.170912OSS
//  
//******************************************************************
#ifndef _BOILERPLATEDCPS_H_
#define _BOILERPLATEDCPS_H_

#include "sacpp_mapping.h"
#include "Boilerplate.h"
#include "dds_dcps.h"


class TemplateTypeSupportInterface;

typedef TemplateTypeSupportInterface * TemplateTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < TemplateTypeSupportInterface> TemplateTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < TemplateTypeSupportInterface> TemplateTypeSupportInterface_out;


class TemplateDataWriter;

typedef TemplateDataWriter * TemplateDataWriter_ptr;
typedef DDS_DCPSInterface_var < TemplateDataWriter> TemplateDataWriter_var;
typedef DDS_DCPSInterface_out < TemplateDataWriter> TemplateDataWriter_out;


class TemplateDataReader;

typedef TemplateDataReader * TemplateDataReader_ptr;
typedef DDS_DCPSInterface_var < TemplateDataReader> TemplateDataReader_var;
typedef DDS_DCPSInterface_out < TemplateDataReader> TemplateDataReader_out;


class TemplateDataReaderView;

typedef TemplateDataReaderView * TemplateDataReaderView_ptr;
typedef DDS_DCPSInterface_var < TemplateDataReaderView> TemplateDataReaderView_var;
typedef DDS_DCPSInterface_out < TemplateDataReaderView> TemplateDataReaderView_out;


class SensorTypeSupportInterface;

typedef SensorTypeSupportInterface * SensorTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < SensorTypeSupportInterface> SensorTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < SensorTypeSupportInterface> SensorTypeSupportInterface_out;


class SensorDataWriter;

typedef SensorDataWriter * SensorDataWriter_ptr;
typedef DDS_DCPSInterface_var < SensorDataWriter> SensorDataWriter_var;
typedef DDS_DCPSInterface_out < SensorDataWriter> SensorDataWriter_out;


class SensorDataReader;

typedef SensorDataReader * SensorDataReader_ptr;
typedef DDS_DCPSInterface_var < SensorDataReader> SensorDataReader_var;
typedef DDS_DCPSInterface_out < SensorDataReader> SensorDataReader_out;


class SensorDataReaderView;

typedef SensorDataReaderView * SensorDataReaderView_ptr;
typedef DDS_DCPSInterface_var < SensorDataReaderView> SensorDataReaderView_var;
typedef DDS_DCPSInterface_out < SensorDataReaderView> SensorDataReaderView_out;


struct TemplateSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < Template, struct TemplateSeq_uniq_> TemplateSeq;
typedef DDS_DCPSSequence_var < TemplateSeq> TemplateSeq_var;
typedef DDS_DCPSSequence_out < TemplateSeq> TemplateSeq_out;
class TemplateTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef TemplateTypeSupportInterface_ptr _ptr_type;
   typedef TemplateTypeSupportInterface_var _var_type;

   static TemplateTypeSupportInterface_ptr _duplicate (TemplateTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TemplateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static TemplateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TemplateTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   TemplateTypeSupportInterface_ptr _this () { return this; }


protected:
   TemplateTypeSupportInterface () {};
   ~TemplateTypeSupportInterface () {};
private:
   TemplateTypeSupportInterface (const TemplateTypeSupportInterface &);
   TemplateTypeSupportInterface & operator = (const TemplateTypeSupportInterface &);
};

class TemplateDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef TemplateDataWriter_ptr _ptr_type;
   typedef TemplateDataWriter_var _var_type;

   static TemplateDataWriter_ptr _duplicate (TemplateDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TemplateDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static TemplateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TemplateDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   TemplateDataWriter_ptr _this () { return this; }

   virtual DDS::LongLong register_instance (const Template& instance_data) = 0;
   virtual DDS::LongLong register_instance_w_timestamp (const Template& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long unregister_instance (const Template& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long unregister_instance_w_timestamp (const Template& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long write (const Template& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long write_w_timestamp (const Template& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long dispose (const Template& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long dispose_w_timestamp (const Template& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long writedispose (const Template& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long writedispose_w_timestamp (const Template& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long get_key_value (Template& key_holder, DDS::LongLong handle) = 0;
   virtual DDS::LongLong lookup_instance (const Template& instance_data) = 0;

protected:
   TemplateDataWriter () {};
   ~TemplateDataWriter () {};
private:
   TemplateDataWriter (const TemplateDataWriter &);
   TemplateDataWriter & operator = (const TemplateDataWriter &);
};

class TemplateDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef TemplateDataReader_ptr _ptr_type;
   typedef TemplateDataReader_var _var_type;

   static TemplateDataReader_ptr _duplicate (TemplateDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TemplateDataReader_ptr _narrow (DDS::Object_ptr obj);
   static TemplateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TemplateDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   TemplateDataReader_ptr _this () { return this; }

   virtual DDS::Long read (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long read_next_sample (Template& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long take_next_sample (Template& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long read_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_next_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_next_instance_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long return_loan (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::Long get_key_value (Template& key_holder, DDS::LongLong handle) = 0;
   virtual DDS::LongLong lookup_instance (const Template& instance) = 0;

protected:
   TemplateDataReader () {};
   ~TemplateDataReader () {};
private:
   TemplateDataReader (const TemplateDataReader &);
   TemplateDataReader & operator = (const TemplateDataReader &);
};

class TemplateDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef TemplateDataReaderView_ptr _ptr_type;
   typedef TemplateDataReaderView_var _var_type;

   static TemplateDataReaderView_ptr _duplicate (TemplateDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TemplateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static TemplateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TemplateDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   TemplateDataReaderView_ptr _this () { return this; }

   virtual DDS::Long read (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long read_next_sample (Template& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long take_next_sample (Template& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long read_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_next_instance (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_next_instance_w_condition (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long return_loan (TemplateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::Long get_key_value (Template& key_holder, DDS::LongLong handle) = 0;
   virtual DDS::LongLong lookup_instance (const Template& instance) = 0;

protected:
   TemplateDataReaderView () {};
   ~TemplateDataReaderView () {};
private:
   TemplateDataReaderView (const TemplateDataReaderView &);
   TemplateDataReaderView & operator = (const TemplateDataReaderView &);
};

struct SensorSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < Sensor, struct SensorSeq_uniq_> SensorSeq;
typedef DDS_DCPSSequence_var < SensorSeq> SensorSeq_var;
typedef DDS_DCPSSequence_out < SensorSeq> SensorSeq_out;
class SensorTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef SensorTypeSupportInterface_ptr _ptr_type;
   typedef SensorTypeSupportInterface_var _var_type;

   static SensorTypeSupportInterface_ptr _duplicate (SensorTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static SensorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static SensorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static SensorTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   SensorTypeSupportInterface_ptr _this () { return this; }


protected:
   SensorTypeSupportInterface () {};
   ~SensorTypeSupportInterface () {};
private:
   SensorTypeSupportInterface (const SensorTypeSupportInterface &);
   SensorTypeSupportInterface & operator = (const SensorTypeSupportInterface &);
};

class SensorDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef SensorDataWriter_ptr _ptr_type;
   typedef SensorDataWriter_var _var_type;

   static SensorDataWriter_ptr _duplicate (SensorDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static SensorDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static SensorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static SensorDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   SensorDataWriter_ptr _this () { return this; }

   virtual DDS::LongLong register_instance (const Sensor& instance_data) = 0;
   virtual DDS::LongLong register_instance_w_timestamp (const Sensor& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long unregister_instance (const Sensor& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long unregister_instance_w_timestamp (const Sensor& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long write (const Sensor& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long write_w_timestamp (const Sensor& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long dispose (const Sensor& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long dispose_w_timestamp (const Sensor& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long writedispose (const Sensor& instance_data, DDS::LongLong handle) = 0;
   virtual DDS::Long writedispose_w_timestamp (const Sensor& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::Long get_key_value (Sensor& key_holder, DDS::LongLong handle) = 0;
   virtual DDS::LongLong lookup_instance (const Sensor& instance_data) = 0;

protected:
   SensorDataWriter () {};
   ~SensorDataWriter () {};
private:
   SensorDataWriter (const SensorDataWriter &);
   SensorDataWriter & operator = (const SensorDataWriter &);
};

class SensorDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef SensorDataReader_ptr _ptr_type;
   typedef SensorDataReader_var _var_type;

   static SensorDataReader_ptr _duplicate (SensorDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static SensorDataReader_ptr _narrow (DDS::Object_ptr obj);
   static SensorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static SensorDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   SensorDataReader_ptr _this () { return this; }

   virtual DDS::Long read (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long read_next_sample (Sensor& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long take_next_sample (Sensor& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long read_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_next_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_next_instance_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long return_loan (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::Long get_key_value (Sensor& key_holder, DDS::LongLong handle) = 0;
   virtual DDS::LongLong lookup_instance (const Sensor& instance) = 0;

protected:
   SensorDataReader () {};
   ~SensorDataReader () {};
private:
   SensorDataReader (const SensorDataReader &);
   SensorDataReader & operator = (const SensorDataReader &);
};

class SensorDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef SensorDataReaderView_ptr _ptr_type;
   typedef SensorDataReaderView_var _var_type;

   static SensorDataReaderView_ptr _duplicate (SensorDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static SensorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static SensorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static SensorDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   SensorDataReaderView_ptr _this () { return this; }

   virtual DDS::Long read (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long read_next_sample (Sensor& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long take_next_sample (Sensor& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::Long read_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long take_next_instance (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
   virtual DDS::Long read_next_instance_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long take_next_instance_w_condition (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::Long return_loan (SensorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::Long get_key_value (Sensor& key_holder, DDS::LongLong handle) = 0;
   virtual DDS::LongLong lookup_instance (const Sensor& instance) = 0;

protected:
   SensorDataReaderView () {};
   ~SensorDataReaderView () {};
private:
   SensorDataReaderView (const SensorDataReaderView &);
   SensorDataReaderView & operator = (const SensorDataReaderView &);
};





#endif
