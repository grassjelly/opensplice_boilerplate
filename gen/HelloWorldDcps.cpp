//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: HelloWorldDcps.cpp
//  Source: gen/HelloWorldDcps.idl
//  Generated: Mon Oct 30 09:39:46 2017
//  OpenSplice 6.7.170912OSS
//  
//******************************************************************

#include "HelloWorldDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < Sensor, struct SensorSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < Msg, struct MsgSeq_uniq_>;
#endif

const char * MsgTypeSupportInterface::_local_id = "IDL:MsgTypeSupportInterface:1.0";

MsgTypeSupportInterface_ptr MsgTypeSupportInterface::_duplicate (MsgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MsgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, MsgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MsgTypeSupportInterface_ptr MsgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   MsgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (MsgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < MsgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MsgTypeSupportInterface_ptr MsgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   MsgTypeSupportInterface_ptr result;
   result = dynamic_cast < MsgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * MsgDataWriter::_local_id = "IDL:MsgDataWriter:1.0";

MsgDataWriter_ptr MsgDataWriter::_duplicate (MsgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MsgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, MsgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MsgDataWriter_ptr MsgDataWriter::_narrow (DDS::Object_ptr p)
{
   MsgDataWriter_ptr result = NULL;
   if (p && p->_is_a (MsgDataWriter::_local_id))
   {
      result = dynamic_cast < MsgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MsgDataWriter_ptr MsgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   MsgDataWriter_ptr result;
   result = dynamic_cast < MsgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * MsgDataReader::_local_id = "IDL:MsgDataReader:1.0";

MsgDataReader_ptr MsgDataReader::_duplicate (MsgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MsgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, MsgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MsgDataReader_ptr MsgDataReader::_narrow (DDS::Object_ptr p)
{
   MsgDataReader_ptr result = NULL;
   if (p && p->_is_a (MsgDataReader::_local_id))
   {
      result = dynamic_cast < MsgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MsgDataReader_ptr MsgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   MsgDataReader_ptr result;
   result = dynamic_cast < MsgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * MsgDataReaderView::_local_id = "IDL:MsgDataReaderView:1.0";

MsgDataReaderView_ptr MsgDataReaderView::_duplicate (MsgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MsgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, MsgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MsgDataReaderView_ptr MsgDataReaderView::_narrow (DDS::Object_ptr p)
{
   MsgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (MsgDataReaderView::_local_id))
   {
      result = dynamic_cast < MsgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MsgDataReaderView_ptr MsgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   MsgDataReaderView_ptr result;
   result = dynamic_cast < MsgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SensorTypeSupportInterface::_local_id = "IDL:SensorTypeSupportInterface:1.0";

SensorTypeSupportInterface_ptr SensorTypeSupportInterface::_duplicate (SensorTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SensorTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, SensorTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SensorTypeSupportInterface_ptr SensorTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   SensorTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (SensorTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < SensorTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SensorTypeSupportInterface_ptr SensorTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   SensorTypeSupportInterface_ptr result;
   result = dynamic_cast < SensorTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SensorDataWriter::_local_id = "IDL:SensorDataWriter:1.0";

SensorDataWriter_ptr SensorDataWriter::_duplicate (SensorDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SensorDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, SensorDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SensorDataWriter_ptr SensorDataWriter::_narrow (DDS::Object_ptr p)
{
   SensorDataWriter_ptr result = NULL;
   if (p && p->_is_a (SensorDataWriter::_local_id))
   {
      result = dynamic_cast < SensorDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SensorDataWriter_ptr SensorDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   SensorDataWriter_ptr result;
   result = dynamic_cast < SensorDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SensorDataReader::_local_id = "IDL:SensorDataReader:1.0";

SensorDataReader_ptr SensorDataReader::_duplicate (SensorDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SensorDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, SensorDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SensorDataReader_ptr SensorDataReader::_narrow (DDS::Object_ptr p)
{
   SensorDataReader_ptr result = NULL;
   if (p && p->_is_a (SensorDataReader::_local_id))
   {
      result = dynamic_cast < SensorDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SensorDataReader_ptr SensorDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   SensorDataReader_ptr result;
   result = dynamic_cast < SensorDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SensorDataReaderView::_local_id = "IDL:SensorDataReaderView:1.0";

SensorDataReaderView_ptr SensorDataReaderView::_duplicate (SensorDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SensorDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, SensorDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SensorDataReaderView_ptr SensorDataReaderView::_narrow (DDS::Object_ptr p)
{
   SensorDataReaderView_ptr result = NULL;
   if (p && p->_is_a (SensorDataReaderView::_local_id))
   {
      result = dynamic_cast < SensorDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SensorDataReaderView_ptr SensorDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   SensorDataReaderView_ptr result;
   result = dynamic_cast < SensorDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



